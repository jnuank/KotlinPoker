/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package KotlinPoker

import org.assertj.core.api.Assertions.*
import org.junit.Before
import org.junit.Test

class AppTest {
    @Test fun testクラブの3が生成されること(){
        Card(Suit.CLUB, Rank.THREE).let{
            assertThat(it.toString()).isEqualTo("3♣")
        }
    }

    class CardComparisonTest{
        val spadeThree = Card(Suit.SPADE, Rank.THREE)
        val aceOfSpades = Card(Suit.SPADE, Rank.ACE)
        val aceOfHearts = Card(Suit.HEART, Rank.ACE)
        @Test fun testスペードの3とスペードのAは同じスートを持つこと(){
            spadeThree.let{
                assertThat(it.hasSameSuit(aceOfSpades))
                .isTrue()
            }
        }
        @Test fun testスペードの3とハートのAは異なるスートを持つこと(){
            spadeThree.let{
                assertThat(it.hasSameSuit(aceOfHearts))
                .isFalse()
            }
        }
        @Test fun testスペードの3とスペードのAは異なるランクを持つこと(){
            spadeThree.let{
                assertThat(it.hasSameRank(aceOfHearts))
                .isFalse()
            }
        }
        @Test fun testスペードのAとハートのAは同じランクを持つ(){
            aceOfSpades.let{
                assertThat(it.hasSameRank(aceOfHearts))
                .isTrue()
            }
        }
    }

    // 課題2
    class TwoCardPorker{
        @Test fun test役がペアになること(){
            val card1 = Card(Suit.DIA, Rank.NINE)
            val card2 = Card(Suit.DIA, Rank.NINE)
            val cards = Cards(mutableListOf(card1, card2))
            cards.let{
                assertThat(it.getHand())
                .isEqualTo("Pair")
            }            
        }
        @Test fun test役がフラッシュであること(){
            val card1 = Card(Suit.DIA, Rank.KING)
            val card2 = Card(Suit.DIA, Rank.NINE)
            val cards = Cards(mutableListOf(card1, card2))
            cards.let{
                assertThat(it.getHand())
                .isEqualTo("Flush")
            }            
        }

        // ハイカード=ブタ
        @Test fun test役がハイカードであること(){
            val card1 = Card(Suit.DIA, Rank.KING)
            val card2 = Card(Suit.HEART, Rank.TWO)
            val cards = Cards(mutableListOf(card1, card2))
            cards.let{
                assertThat(it.getHand())
                .isEqualTo("HighCard")
            }
        }
    }
}
